"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var http_1 = require("@angular/http");
var Solr;
(function (Solr) {
    var SolrCmd = (function () {
        function SolrCmd(url, http) {
            this.url = url;
            this.http = http;
            this.options = new http_1.RequestOptions({ headers: new http_1.Headers({ 'Content-Type': 'application/json' }) });
        }
        SolrCmd.prototype.status = function () {
            var url = this.url + "admin/cores";
            var params = new http_1.URLSearchParams();
            params.set("wt", "json");
            params.set("indent", "on");
            params.set("action", "STATUS");
            var p = { params: params };
            console.log("status: url:\"" + url + "\" p:\"" + JSON.stringify(p) + "\"");
            return this.http.get(url, p);
        };
        SolrCmd.prototype.coreurl = function (core, cmd) {
            return this.url + core + "/" + cmd;
        };
        SolrCmd.prototype.queryS = function (core, q) {
            return this.query(core, new http_1.URLSearchParams("q=" + q));
        };
        SolrCmd.prototype.query = function (core, params) {
            var url = this.coreurl(core, "select");
            params.set("wt", "json");
            params.set("indent", "on");
            var p = { params: params };
            console.log("query: url:\"" + url + "\" p:\"" + JSON.stringify(p) + "\"");
            return this.http.get(url, p);
        };
        return SolrCmd;
    }());
    Solr.SolrCmd = SolrCmd;
})(Solr = exports.Solr || (exports.Solr = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29sci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNvbHIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSxzQ0FBeUY7QUFHekYsSUFBYyxJQUFJLENBaURqQjtBQWpERCxXQUFjLElBQUk7SUFlZDtRQUVJLGlCQUFvQixHQUFVLEVBQVMsSUFBUztZQUE1QixRQUFHLEdBQUgsR0FBRyxDQUFPO1lBQVMsU0FBSSxHQUFKLElBQUksQ0FBSztZQURoRCxZQUFPLEdBQWtCLElBQUkscUJBQWMsQ0FBQyxFQUFFLE9BQU8sRUFBRSxJQUFJLGNBQU8sQ0FBQyxFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRTlHLENBQUM7UUFFRCx3QkFBTSxHQUFOO1lBQ0ksSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxhQUFhLENBQUM7WUFDbkMsSUFBSSxNQUFNLEdBQUcsSUFBSSxzQkFBZSxFQUFFLENBQUM7WUFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUIsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUMsTUFBTSxFQUFFLENBQUM7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBZ0IsR0FBRyxlQUFRLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQUcsQ0FBQyxDQUFDO1lBQzdELE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBRSxHQUFHLEVBQUUsQ0FBQyxDQUFFLENBQUM7UUFDbkMsQ0FBQztRQUVELHlCQUFPLEdBQVAsVUFBUyxJQUFXLEVBQUUsR0FBVTtZQUM1QixNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUN2QyxDQUFDO1FBRUQsd0JBQU0sR0FBTixVQUFRLElBQVcsRUFBRSxDQUFRO1lBQ3pCLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFFLElBQUksRUFBRSxJQUFJLHNCQUFlLENBQUUsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0QsQ0FBQztRQUVELHVCQUFLLEdBQUwsVUFBTyxJQUFXLEVBQUUsTUFBc0I7WUFDdEMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUMsUUFBUSxDQUFDLENBQUM7WUFDdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7WUFDekIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxRQUFRLEVBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUIsSUFBSSxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUMsTUFBTSxFQUFFLENBQUM7WUFDMUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBZSxHQUFHLGVBQVEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBRyxDQUFDLENBQUM7WUFDNUQsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFFLEdBQUcsRUFBRSxDQUFDLENBQUUsQ0FBQztRQUNuQyxDQUFDO1FBRUwsY0FBQztJQUFELENBQUMsQUFqQ0QsSUFpQ0M7SUFqQ1ksWUFBTyxVQWlDbkIsQ0FBQTtBQUNMLENBQUMsRUFqRGEsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBaURqQiIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgSHR0cCwgUmVzcG9uc2UsIFVSTFNlYXJjaFBhcmFtcywgSGVhZGVycywgUmVxdWVzdE9wdGlvbnMgfSBmcm9tICdAYW5ndWxhci9odHRwJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xuXG5leHBvcnQgbW9kdWxlIFNvbHIge1xuICAgIGV4cG9ydCBpbnRlcmZhY2UgSW5kZXgge1xuICAgICAgICBudW1Eb2NzOm51bWJlcjtcbiAgICAgICAgbWF4RG9jczpudW1iZXI7XG4gICAgfVxuICAgIGV4cG9ydCBpbnRlcmZhY2UgU3RhdHVze1xuICAgICAgICBuYW1lOnN0cmluZztcbiAgICAgICAgaW5zdGFuY2VEaXI6c3RyaW5nO1xuICAgICAgICBkYXRhRGlyOnN0cmluZztcbiAgICAgICAgc2NoZW1hOnN0cmluZztcbiAgICAgICAgc3RhcnRUaW1lOnN0cmluZztcbiAgICAgICAgdXBkYXRpbWU6bnVtYmVyO1xuICAgICAgICBpbmRleDpJbmRleDtcbiAgICB9XG5cbiAgICBleHBvcnQgY2xhc3MgU29sckNtZCB7XG4gICAgICAgIG9wdGlvbnM6UmVxdWVzdE9wdGlvbnMgPSBuZXcgUmVxdWVzdE9wdGlvbnMoeyBoZWFkZXJzOiBuZXcgSGVhZGVycyh7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSkgfSk7XG4gICAgICAgIGNvbnN0cnVjdG9yKCBwdWJsaWMgdXJsOnN0cmluZywgcHVibGljIGh0dHA6SHR0cCApeyAgICAgICAgICAgIFxuICAgICAgICB9XG5cbiAgICAgICAgc3RhdHVzKCk6T2JzZXJ2YWJsZTxSZXNwb25zZT57XG4gICAgICAgICAgICBsZXQgdXJsID0gdGhpcy51cmwgKyBcImFkbWluL2NvcmVzXCI7XG4gICAgICAgICAgICBsZXQgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgICAgICAgcGFyYW1zLnNldChcInd0XCIsIFwianNvblwiKTtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoXCJpbmRlbnRcIixcIm9uXCIpO1xuICAgICAgICAgICAgcGFyYW1zLnNldChcImFjdGlvblwiLFwiU1RBVFVTXCIpO1xuICAgICAgICAgICAgbGV0IHAgPSB7IHBhcmFtczpwYXJhbXMgfTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBzdGF0dXM6IHVybDpcIiR7dXJsfVwiIHA6XCIke0pTT04uc3RyaW5naWZ5KHApfVwiYCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCggdXJsLCBwICk7XG4gICAgICAgIH0gXG5cbiAgICAgICAgY29yZXVybCggY29yZTpzdHJpbmcsIGNtZDpzdHJpbmcpe1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXJsICsgY29yZSArIFwiL1wiICsgY21kO1xuICAgICAgICB9XG5cbiAgICAgICAgcXVlcnlTKCBjb3JlOnN0cmluZywgcTpzdHJpbmcgKTpPYnNlcnZhYmxlPFJlc3BvbnNlPntcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnF1ZXJ5KCBjb3JlLCBuZXcgVVJMU2VhcmNoUGFyYW1zKCBcInE9XCIgKyBxKSk7XG4gICAgICAgIH1cblxuICAgICAgICBxdWVyeSggY29yZTpzdHJpbmcsIHBhcmFtczpVUkxTZWFyY2hQYXJhbXMgKTpPYnNlcnZhYmxlPFJlc3BvbnNlPntcbiAgICAgICAgICAgIGxldCB1cmwgPSB0aGlzLmNvcmV1cmwoY29yZSxcInNlbGVjdFwiKTtcbiAgICAgICAgICAgIHBhcmFtcy5zZXQoXCJ3dFwiLCBcImpzb25cIik7XG4gICAgICAgICAgICBwYXJhbXMuc2V0KFwiaW5kZW50XCIsXCJvblwiKTtcbiAgICAgICAgICAgIGxldCBwID0geyBwYXJhbXM6cGFyYW1zIH07XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgcXVlcnk6IHVybDpcIiR7dXJsfVwiIHA6XCIke0pTT04uc3RyaW5naWZ5KHApfVwiYCk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCggdXJsLCBwICk7XG4gICAgICAgIH0gICAgICAgIFxuICAgICAgICBcbiAgICB9XG59Il19